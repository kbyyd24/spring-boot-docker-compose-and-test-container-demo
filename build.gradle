import nu.studer.gradle.jooq.JooqEdition

plugins {
  id 'org.springframework.boot' version '3.1.0'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.flywaydb.flyway' version '8.0.5'
  id 'java'
  id "org.jetbrains.kotlin.jvm" version "1.8.22"
  id 'nu.studer.jooq' version '8.2.1'
  id "org.jetbrains.kotlin.plugin.spring" version "1.8.22"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.jetbrains.kotlin:kotlin-reflect'
  implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
  implementation 'org.springframework.boot:spring-boot-starter-jooq'
  runtimeOnly 'org.postgresql:postgresql'
  implementation 'org.flywaydb:flyway-core'
  implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.15.2'

  developmentOnly("org.springframework.boot:spring-boot-docker-compose")

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-testcontainers'
  testImplementation 'org.testcontainers:junit-jupiter'
  testImplementation 'org.testcontainers:postgresql'
  testImplementation 'io.kotest:kotest-assertions-core:5.6.2'

  jooqGenerator 'org.postgresql:postgresql:42.3.8'
}

test {
  useJUnitPlatform()
}

testing {
  suites {
    repositoryTest(JvmTestSuite) {
      dependencies {
        implementation project()
        implementation 'org.flywaydb:flyway-core'
        implementation 'org.springframework.boot:spring-boot-starter-test'
        implementation 'org.springframework.boot:spring-boot-testcontainers'
        implementation 'org.springframework.boot:spring-boot-starter-jooq'
        implementation 'org.testcontainers:junit-jupiter'
        implementation 'org.testcontainers:postgresql'
        implementation 'io.kotest:kotest-assertions-core:5.6.2'
      }
      targets {
        all {
          testTask.configure {
            shouldRunAfter(test)
          }
        }
      }
    }
  }
}

tasks.check {
  dependsOn(testing.suites.repositoryTest)
}

def generatedSourcesDir = "$projectDir/src/main/generated"

sourceSets {
  main {
    java {
      srcDirs += [generatedSourcesDir]
    }
  }
}

kotlin {
  jvmToolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

bootTestRun {
  mainClass = 'cn.gaoyuexiang.demo.TestAppKt'
}

def getDatabasePort() {
  "./show_db_port.sh".execute().text.trim()
}

jooq {
  version = '3.18.4'
  edition = JooqEdition.OSS
  configurations {
    main {
      generateSchemaSourceOnCompilation = false
      generationTool {
        logging = org.jooq.meta.jaxb.Logging.WARN
        jdbc {
          driver = 'org.postgresql.Driver'
          url = "jdbc:postgresql://localhost:${getDatabasePort()}/postgres"
          user = 'postgres'
          password = 'password'
        }
        generator {
          database {
            name = 'org.jooq.meta.postgres.PostgresDatabase'
            inputSchema = 'public'
          }
          generate {
            records = true
            fluentSetters = true
          }
          target {
            packageName = 'cn.gaoyuexiang.demo.todo.jooq'
            directory = generatedSourcesDir
          }
        }
      }
    }
  }
}

